@page "/"
@inject MyPortfolio.WASM.ProjectApiService projectApi

@using MyPortfolio.Shared

<!-- Begin Header -->
<header>
    <table>
        <tr>
            <td class="name">
                <h1 class="first_name">Caleb</h1>
            </td>
            <td class="contact_info">
                <h5 class="first_name">clbmrls014@gmail.com</h5>
            </td>
        </tr>
        <tr>
            <td class="name">
                <h1 class="last_name">Morales</h1>
            </td>
            <td class="contact_info">
                <h5 class="linkedin contact_info" style="font-weight: 400;"><a href="https://www.linkedin.com/in/caleb-morales-415882199/">Connect with me on LinkedIn!</a></h5>
            </td>
        </tr>
    </table>

</header>
<!-- End Header -->
<!-- Begin Content -->
<article>
    <h1>My Portfolio</h1>
    <ul class="project-list">
        @foreach (var p in projects)
        {
            string link = $"/blog/{p.Id}";
            <li class="entry">
                <NavLink href=@link><h4 style="color: #E7E6E6">@p.Title</h4></NavLink>
                <p>@p.CompletionDate</p>
                <button @onclick="@(() => removeProject(p))" style="">Remove Project</button>
            </li>
        }
    </ul>
    <br />

</article>
<!-- End Content -->
<!-- Begin Form (Temporary)-->
<div>
    <h3>Add a Project</h3>
    <input @bind-value="newTitle" placeholder="Project Title" />
    <input @bind-value="newRequirements" placeholder="Project Requirements" />
    <input @bind-value="newDescription" placeholder="Project Description" />
    <button @onclick="addProject">Add Project</button>
</div>
<!-- End Form (Temoporary) -->
<!-- Begin Footer-->
<footer class="page-footer">
    <p>&copy; Caleb Morales, 2020</p>
</footer>
<!-- End Footer-->

@code {
    private string newTitle;
    private string newRequirements;
    private string newDescription;
    private IEnumerable<Project> projects = new List<Project>();

    private async Task addProject()
    {
        var project = new Project
        {
            Title = newTitle,
            Requirements = newRequirements,
            Description = newDescription,
            CompletionDate = DateTime.Now
        };
        await projectApi.AddProjectAsync(project);
        projects = await projectApi.GetProjectsAsync();

    }

    private async Task removeProject(Project project)
    {
        await projectApi.RemoveProjectAsync(project);
        projects = await projectApi.GetProjectsAsync();
    }

    private async Task GetProjects()
    {
        projects = await projectApi.GetProjectsAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        projects = await projectApi.GetProjectsAsync();
    }
}
